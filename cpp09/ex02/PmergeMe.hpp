/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   PmergeMe.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ilyanar <ilyanar@student.42lausanne.ch>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/02 17:07:29 by ilyanar           #+#    #+#             */
/*   Updated: 2025/10/23 12:37:54 by ilyanar          ###   LAUSANNE.ch       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PMERGEME_HPP
# define PMERGEME_HPP

#include <ctime>
#include <deque>
#include <math.h>
#include <cmath>
#include <utility>
#include <vector>
#include <iostream>
#include <list>
#include <unistd.h>
#include <climits>
#include <cstdlib>
#include <ctime>
#include <sstream>
#include <stdexcept>
#include <sys/wait.h>
#include <unistd.h>
#include <cassert>
#include <vector>

# ifndef DEBUG
#  define DEBUG 0
# endif

//----------------------------------------------------------------------------
//! Defines to simplify writing iterators
//----------------------------------------------------------------------------
#define vit std::vector<int>::iterator
#define vi std::vector<int>
#define det std::deque<int>::iterator
#define de std::deque<int>

//----------------------------------------------------------------------------
//! Return true if the object T is sorted, otherwise returns false
//----------------------------------------------------------------------------
template <class T>
bool isSorted(T begin, T end){
	begin++;
	while (begin != end){
		if (*begin - 1 > *begin)
			return false;
		begin++;
	}
	return true;
}

class VectSort
{
	private:
		//----------------------------------------------------------------------------
		/// Main object
		//----------------------------------------------------------------------------
		vi	_data;

		//----------------------------------------------------------------------------
		/// Object for calculating the timestamp
		//----------------------------------------------------------------------------
		clock_t _start;

		//----------------------------------------------------------------------------
		/// Static variable to calculate the total comparison number
		//----------------------------------------------------------------------------
		static int _count;

		//----------------------------------------------------------------------------
		/// Debug level and debug function
		//----------------------------------------------------------------------------
		static int _debug;
		void debugCmd(char*, char**) const;
		void debugInsert(vi &, vi &) const;
		void debugBinary(vi &, vit, vit, vit, vit, vit, int, int);

		//----------------------------------------------------------------------------
		/// Current recursivity level. Ex: 2, 4, 8...
		//----------------------------------------------------------------------------
		size_t _order;

		//----------------------------------------------------------------------------
		/// Print final datal object at the end
		//----------------------------------------------------------------------------
		void endSortInfo() const;

		//----------------------------------------------------------------------------
		/// Recursive Merge part 
		//----------------------------------------------------------------------------
		void merge();

		//----------------------------------------------------------------------------
		/// Second part of the algorithm
		//----------------------------------------------------------------------------
		void insert();
		void sort(vi &, vi &, vi &);

		//----------------------------------------------------------------------------
		/// This is used when you don't need to specify the Jacobsthal number
		//----------------------------------------------------------------------------
		void standardBinarySearch(vi &, vi &);

		//----------------------------------------------------------------------------
		/// Main binary search
		//----------------------------------------------------------------------------
		void binarySearch(vi &, vit, vit, vit, vit);

		//----------------------------------------------------------------------------
		/// Used when you need the Jacobsthal numbers
		//----------------------------------------------------------------------------
		void jacobsthalBinarySearch(vi &, vi &, std::vector<long>::iterator &);

		//----------------------------------------------------------------------------
		/// Returns a vector<long> of N numbers of Jacobsthal sequences
		//----------------------------------------------------------------------------
		std::vector<long> jacobsthal(size_t) const;


		//--------------------------------------------
		/// Deleted default constructor
		//--------------------------------------------
		VectSort();

	public:
		//--------------------------------------------
		/// Orthodoxe canonical form
		//--------------------------------------------
	
		//--------------------------------------------
		/// Main constructor
		//--------------------------------------------
		VectSort(char *);

		//--------------------------------------------
		/// Destructor
		//--------------------------------------------
		~VectSort();

		//--------------------------------------------
		/// Constructor by copy constructor
		//--------------------------------------------
		VectSort(const VectSort &other);

		//--------------------------------------------
		/// Overload the operator =
		//--------------------------------------------
		VectSort& operator=(const VectSort &other);

		//----------------------------------------------------------------------------
		/// Function to start sorting
		//----------------------------------------------------------------------------
		void FordJonhson();

		//----------------------------------------------------------------------------
		/// Print function shows the numbers in their current ordering state
		//----------------------------------------------------------------------------
		void print() const;

		//----------------------------------------------------------------------------
		/// Debug options
		//----------------------------------------------------------------------------
		void debugMode(int, int, int);
		void setDebug(int);
};

class DequeSort
{
	private:
		//----------------------------------------------------------------------------
		/// Main object
		//----------------------------------------------------------------------------
		de	_data;

		//----------------------------------------------------------------------------
		/// Object for calculating the timestamp
		//----------------------------------------------------------------------------
		clock_t _start;

		//----------------------------------------------------------------------------
		/// Static variable to calculate the total comparison number
		//----------------------------------------------------------------------------
		static int _count;

		//----------------------------------------------------------------------------
		/// Debug level and debug function
		//----------------------------------------------------------------------------
		static int _debug;
		void debugCmd(char*, char**) const;
		void debugInsert(de&, de&) const;
		void debugBinary(de&, det, det, det, det, det, int, int);

		//----------------------------------------------------------------------------
		/// Current recursivity level. Ex: 2, 4, 8...
		//----------------------------------------------------------------------------
		size_t _order;

		//----------------------------------------------------------------------------
		/// Print final datal object at the end
		//----------------------------------------------------------------------------
		void endSortInfo() const;

		//----------------------------------------------------------------------------
		/// Recursive Merge part 
		//----------------------------------------------------------------------------
		void merge();

		//----------------------------------------------------------------------------
		/// Second part of the algorithm
		//----------------------------------------------------------------------------
		void insert();
		void sort(de&, de&, de&);

		//----------------------------------------------------------------------------
		/// Main binary search
		//----------------------------------------------------------------------------
		void binarySearch(de&, det, det, det, det);

		//----------------------------------------------------------------------------
		/// This is used when you don't need to specify the Jacobsthal number
		//----------------------------------------------------------------------------
		void standardBinarySearch(de&, de&);

		//----------------------------------------------------------------------------
		/// Used when you need the Jacobsthal numbers
		//----------------------------------------------------------------------------
		void jacobsthalBinarySearch(de&, de&, std::vector<long>::iterator &);

		//----------------------------------------------------------------------------
		/// Returns a vector<long> of N numbers of Jacobsthal sequences
		//----------------------------------------------------------------------------
		std::vector<long> jacobsthal(size_t) const;

		//--------------------------------------------
		/// Deleted default constructor
		//--------------------------------------------
		DequeSort();

	public:
		//--------------------------------------------
		/// Orthodoxe canonical form
		//--------------------------------------------

		//--------------------------------------------
		/// Main constructor
		//--------------------------------------------
		DequeSort(char *);

		//--------------------------------------------
		/// Destructor
		//--------------------------------------------
		~DequeSort();

		//--------------------------------------------
		/// Constructor by copy constructor
		//--------------------------------------------
		DequeSort(const DequeSort &other);

		//--------------------------------------------
		/// Overload the operator =
		//--------------------------------------------
		DequeSort& operator=(const DequeSort &other);

		//----------------------------------------------------------------------------
		/// Function to start sorting
		//----------------------------------------------------------------------------
		void FordJonhson();

		//----------------------------------------------------------------------------
		/// Print function shows the numbers in their current ordering state
		//----------------------------------------------------------------------------
		void print() const;

		//----------------------------------------------------------------------------
		/// Debug options
		//----------------------------------------------------------------------------
		void debugMode(int, int, int);
		void setDebug(int);
};

#endif
